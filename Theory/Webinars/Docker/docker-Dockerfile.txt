в php хочется добавить расширения
например, расширения для postgres или инернационализацию
когда берем готовый образ, ничего добавить не можем
есть ли возможность взять и этот образ изменить?

в корне проекта создаем папку .docker
в ней папку php
в ней Dockerfile (с большой буквы)
это файл, в котором будут содержаться инструкции для сборки образа
мы попробуем собрать образ для php

сначала напишем, от какого базового образа унаследуемся
FROM php:8.1-cli
задем будем добавлять директивы
каждая директива будет создавать новый слой в файловой системе образа
каждая директива это коммит, как в гите
укажем, какая рабочая директория
WORKDIR /app
CMD это команда, что конкретно будем запускать
CMD php -S 0.0.0.0:8080
у Dockerfile свой синтаксис

про установку расширений
RUN docker-php-ext-install intl
директива RUN выполнит определенные команды внутри нашего образа и зафииксирует результат
docker-php-ext-install
специальная команда, чтобы внутри контейнеров устанавливать расширения php
intl имя расширения
теперь в docker-compose.yaml в корне проекта пишем
вместо строки
image: php:8.1-cli
директиву c указанием пути до Dockerfile
build: ./.docker/php
и запускаем команду в консоли находясь в папке проекта
docker-compose up --build -d

содержимое Dockerfile

FROM php:8.1-cli
WORKDIR /app
RUN docker-php-ext-install intl
CMD php -S 0.0.0.0:8080

docker-compose.yaml

version: '3'
services:
    php:
        build: ./.docker/php
        ports:
            - "8080:8080"
        volumes:
            - ./:/app
        working_dir: /app
        command: "php -S 0.0.0.0:8080"

не хватает системных библиотек Линукса
#6 5.898 No package 'icu-uc' found
#6 5.898 No package 'icu-io' found
#6 5.898 No package 'icu-i18n' found
ERROR: Service 'php' failed to build : Build failed
У Альберта те же ошибки возникают
пытается установить locales, не получается

выберем другое расшрение для установки, для postgres

содержимое Dockerfile

FROM php:8.1-cli
WORKDIR /app
RUN apt-get update && apt-get install -y libpq-dev
RUN docker-php-ext-install -j$(nproc) pdo pdo_pgsql
CMD php -S 0.0.0.0:8080

Успешно,
Creating 01_php_1 ... done

содержимое Dockerfile, разбор строк
каждая строчка это слой в образе контейнера
FROM php:8.1-cli
берем с базового образа его слои
RUN apt-get update && apt-get install -y libpq-dev
устанавливаю системную библиотечку для работы с postgres
RUN docker-php-ext-install -j$(nproc) pdo pdo_pgsql
устанавливаю специальное расширение для работы с postgres для докера
и видим в phpinfo(); что появилось расширение pdo_pgsql

таким образом я могу через Dockerfile устанавливать у образ контейнера то, что мне нужно

вообще указание WORKDIR хорошо поставить в конец
и взять версию fpm для php

содержимое Dockerfile

FROM php:8.1-fpm
RUN apt-get update && apt-get install -y libpq-dev
RUN docker-php-ext-install -j$(nproc) pdo pdo_pgsql
WORKDIR /app
CMD php -S 0.0.0.0:8080

Recreating 01_php_1 ... done

-j$(nproc) распараллель, пожалуйста, на столько потоков, сколько ядер существует
так быстрее будет
если не написать, чуть помедленнее сборка будет

Dockerfile это файл, содержащий список команд для формирования образа контейнера
Важные команды файла Dockerfile:

FROM указание базового образа
ARG объявление аргумента (переменной)
RUN выполнение команды и фиксация нового слоя образа
COPY копирование файлов в ФС контейнера (с фиксацией слоя)
WORKDIR установка рабочей директории в контейнере
CMD команда для запуска контейнера
(для запуска внутри контейнера когда он будет подготовлен)

пример на использование команды COPY
допустим есть секретный ключ, который надо в контейнер закинуть
и чтобы он там уже не изменялся
это плохой пример
или хочется конфигурацию зафиксировать, конфиг
но в примере будем мапить файл с конфигом



